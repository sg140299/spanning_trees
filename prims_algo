#include<bits/stdc++.h>
using namespace std;
#define pb push_back
#define mk make_pair
class Graph{
    public:
    int V;
    list<pair<int,int> > *adj;
    Graph(int n){
        V=n;
        adj=new list<pair<int,int> >[n];
    }
    void addEdge(int x,int y,int weigh){
        adj[x].pb(mk(y,weigh));
        adj[y].pb(mk(x,weigh));
    }
    int find_min_vertex(bool *visited,int *weight,int n){
        int minvertex=-1;
        for(int i=0;i<n;i++){
            if(!visited[i] && (minvertex==-1 || weight[i]<weight[minvertex])){
                minvertex=i;
            }
        }
        return minvertex;
    }
    
    void prims(){
        int n=V;
        bool *visited=new bool[n];
        int *weight=new int[n];
        int *parent=new int[n];
        for(int i=0;i<n;i++){
            visited[i]=false;
            weight[i]=INT_MAX;
        }
        weight[0]=0;
        parent[0]=-1;
        for(int i=0;i<n;i++){
            int minvertex=find_min_vertex(visited,weight,n);
            visited[minvertex]=true;
            for(auto nbr:adj[minvertex]){
                if(!visited[nbr.first]){
                    if(weight[nbr.first]>nbr.second){
                        weight[nbr.first]=nbr.second;
                        parent[nbr.first]=minvertex;
                    }
                }
            }
        }
        for(int i=0;i<n;i++){
            cout<<"( "<<i<<"  "<<parent[i]<<" ) "<<"--->>"<<weight[i]<<endl;
        }
        return;
    }

};
int main(){
    int n,m;
    cin>>n>>m;
    Graph G(n);
    int x,y,w;
    for(int i=0;i<m;i++){
        cin>>x>>y>>w;
        G.addEdge(x,y,w);
    }
    G.prims();
    return 0;
}
